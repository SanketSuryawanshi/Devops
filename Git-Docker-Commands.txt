Here’s a concise list of common **Docker** and **Git** commands with brief explanations:

---

### **Docker Commands:**

1. **docker pull <image>**  
   Pull an image from a repository (e.g., DockerHub).
   
2. **docker build -t <name> <path>**  
   Build an image from a Dockerfile.
   
3. **docker run <image>**  
   Run a container from an image.
   
4. **docker run -d <image>**  
   Run a container in detached mode (background).
   
5. **docker ps**  
   List running containers.
   
6. **docker ps -a**  
   List all containers (running or stopped).
   
7. **docker stop <container-id>**  
   Stop a running container.
   
8. **docker start <container-id>**  
   Start a stopped container.
   
9. **docker rm <container-id>**  
   Remove a stopped container.
   
10. **docker rmi <image-id>**  
    Remove an image.
    
11. **docker logs <container-id>**  
    Show logs of a running/stopped container.
    
12. **docker exec -it <container-id> /bin/bash**  
    Open an interactive shell inside a running container.
    
13. **docker-compose up**  
    Start services defined in `docker-compose.yml`.
    
14. **docker-compose down**  
    Stop and remove containers and networks defined by Docker Compose.

15. **docker network ls**  
    List available Docker networks.

16. **docker volume ls**  
    List Docker volumes.

17. **docker inspect <container-id>**  
    Show detailed info about a container.

18. Remove all images: docker rmi $(docker images -q)

19. Stop and remove all containers: docker stop $(docker ps -q) | docker rm $(docker ps -aq)

20. Clean up unused resources: docker system prune -a --volumes

https://github.com/LondheShubham153/simple-java-docker.git

DOCKERFILE : CONTAINS INSTRUCTION TO BUILD DOCKER IMAGE > Run Docker Image to get > Docker Container

root@ip-172-31-91-253:~/Projects/simple-java-docker# cat Dockerfile
# stable official Java runtime base image
FROM openjdk:17-jdk-alpine

# metadata
LABEL maintainer="your-email@example.com"
LABEL version="1.0"
LABEL description="A simple Java application"

# working directory
WORKDIR /app

# Copy source code into the container
COPY src/Main.java /app/Main.java

# Compile the Java code
RUN javac Main.java

# Run the Java application when the container starts
CMD ["java", "Main"]

CMD and ENTRYPOINT are like injection to continaer as Command

https://github.com/LondheShubham153/flask-app-ecs

docker attach <container-id>
docker logs <container-id>

## Docker Network

1. Host N/W
2. Bridge N/W ( Default )
3. User Define Bridge ( Custome ) N/W
4. None N/W
5. Macvlan N/W
6. IPvlan N/W
7. Overlay N/W

root@ip-172-31-91-253:~/Projects/flask-app-ecs# docker network ls
NETWORK ID     NAME      DRIVER    SCOPE
3736edf90e09   bridge    bridge    local
79da0acb73fa   host      host      local
f57300e0adb9   none      null      local

root@ip-172-31-91-253:~/Projects/flask-app-ecs# docker network create mynetwork -d bridge
f2f9b8c70ed89a313c1d3f6d83de8ef620f7f073958d9df3ea7593076a8038c1
root@ip-172-31-91-253:~/Projects/flask-app-ecs# docker network ls
NETWORK ID     NAME        DRIVER    SCOPE
3736edf90e09   bridge      bridge    local
79da0acb73fa   host        host      local
f2f9b8c70ed8   mynetwork   bridge    local
f57300e0adb9   none        null      local

DOCKER NETWORKING PROJECT

https://github.com/LondheShubham153/two-tier-flask-app
$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag

root@ip-172-31-91-253:~/Projects# docker pull mysql
Using default tag: latest
latest: Pulling from library/mysql
2c0a233485c3: Pull complete
cb5a6a8519b2: Pull complete
570d30cf82c5: Pull complete
a841bff36f3c: Pull complete
80ba30c57782: Pull complete
5e49e1f26961: Pull complete
ced670fc7f1c: Pull complete
0b9dc7ad7f03: Pull complete
cd0d5df9937b: Pull complete
1f87d67b89c6: Pull complete
Digest: sha256:0255b469f0135a0236d672d60e3154ae2f4538b146744966d96440318cc822c6
Status: Downloaded newer image for mysql:latest
docker.io/library/mysql:latest
root@ip-172-31-91-253:~/Projects# docker images
REPOSITORY   TAG       IMAGE ID       CREATED        SIZE
flask-app    latest    356c40361627   12 hours ago   1.01GB
mysql        latest    56a8c14e1404   6 weeks ago    603MB
root@ip-172-31-91-253:~/Projects# docker run --name mysqldb -e MYSQL_ROOT_PASSWORD=root -d mysql
e9ae9192d40a6a7821d933cc32a7d466cfbab85285d7557f263cf5815cf7672b
root@ip-172-31-91-253:~/Projects# docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                 NAMES
e9ae9192d40a   mysql     "docker-entrypoint.s…"   5 seconds ago   Up 4 seconds   3306/tcp, 33060/tcp   mysqldb
root@ip-172-31-91-253:~/Projects# docker exec -it e9ae9192d40a bash
bash-5.1# mysql -u root -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 8
Server version: 9.1.0 MySQL Community Server - GPL

Copyright (c) 2000, 2024, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.01 sec)

mysql>
bash-5.1# mysql --version
mysql  Ver 9.1.0 for Linux on x86_64 (MySQL Community Server - GPL)

### DOCKER FILE FOR FLASK APP ###

root@ip-172-31-91-253:~/Projects/two-tier-flask-app# cat Dockerfile
# Use an official Python runtime as the base image
FROM python:3.9-slim

# Set the working directory in the container
WORKDIR /app

# install required packages for system
RUN apt-get update \
    && apt-get upgrade -y \
    && apt-get install -y gcc default-libmysqlclient-dev pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Copy the requirements file into the container
COPY requirements.txt .

# Install app dependencies
RUN pip install mysqlclient
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of the application code
COPY . .

# Specify the command to run your application
CMD ["python", "app.py"]

>>> Create Docker Image from Docker File:

root@ip-172-31-91-253:~/Projects/two-tier-flask-app#
root@ip-172-31-91-253:~/Projects/two-tier-flask-app# docker build -t two-tier-backend .
[+] Building 54.5s (12/12) FINISHED                                                                                                              docker:default
 => [internal] load build definition from Dockerfile                                                                                                       0.1s
 => => transferring dockerfile: 667B                                                                                                                       0.0s
 => [internal] load metadata for docker.io/library/python:3.9-slim                                                                                         0.5s
 => [internal] load .dockerignore                                                                                                                          0.0s
 => => transferring context: 2B                                                                                                                            0.0s
 => [1/7] FROM docker.io/library/python:3.9-slim@sha256:6250eb7983c08b3cf5a7db9309f8630d3ca03dd152158fa37a3f8daaf397085d                                   3.6s
 => => resolve docker.io/library/python:3.9-slim@sha256:6250eb7983c08b3cf5a7db9309f8630d3ca03dd152158fa37a3f8daaf397085d                                   0.1s
 => => sha256:6250eb7983c08b3cf5a7db9309f8630d3ca03dd152158fa37a3f8daaf397085d 10.41kB / 10.41kB                                                           0.0s
 => => sha256:43e98aa4594b2a62ace026fb04338453f799bd6012b7933ecd442d6876787cb5 1.75kB / 1.75kB                                                             0.0s
 => => sha256:6a22698eab0ea915af39918e5d2e4f27e49afc6944fd1d97466e13820324bc62 5.41kB / 5.41kB                                                             0.0s
 => => sha256:2d429b9e73a6cf90a5bb85105c8118b30a1b2deedeae3ea9587055ffcb80eb45 29.13MB / 29.13MB                                                           0.5s
 => => sha256:4920a3bd5f7ed3269b647eb643846a0652dc21daa31763b4afc848701981d141 3.51MB / 3.51MB                                                             0.2s
 => => sha256:77edb37367fad6d17c53a3cabdf41a57c0221a49f77250d97e3f5bb1fc1ed6e0 14.93MB / 14.93MB                                                           0.4s
 => => sha256:02c34c079cc82f150c24eae4d136fd997632cd64c1f922aa8c5974be33792ae5 255B / 255B                                                                 0.3s
 => => extracting sha256:2d429b9e73a6cf90a5bb85105c8118b30a1b2deedeae3ea9587055ffcb80eb45                                                                  1.5s
 => => extracting sha256:4920a3bd5f7ed3269b647eb643846a0652dc21daa31763b4afc848701981d141                                                                  0.2s
 => => extracting sha256:77edb37367fad6d17c53a3cabdf41a57c0221a49f77250d97e3f5bb1fc1ed6e0                                                                  0.8s
 => => extracting sha256:02c34c079cc82f150c24eae4d136fd997632cd64c1f922aa8c5974be33792ae5                                                                  0.0s
 => [internal] load build context                                                                                                                          0.1s
 => => transferring context: 167.98kB                                                                                                                      0.0s
 => [2/7] WORKDIR /app                                                                                                                                     0.1s
 => [3/7] RUN apt-get update     && apt-get upgrade -y     && apt-get install -y gcc default-libmysqlclient-dev pkg-config     && rm -rf /var/lib/apt/li  28.7s
 => [4/7] COPY requirements.txt .                                                                                                                          0.1s
 => [5/7] RUN pip install mysqlclient                                                                                                                      9.4s
 => [6/7] RUN pip install --no-cache-dir -r requirements.txt                                                                                               5.6s
 => [7/7] COPY . .                                                                                                                                         0.3s
 => exporting to image                                                                                                                                     5.7s
 => => exporting layers                                                                                                                                    5.7s
 => => writing image sha256:1cdc6eec685eb9dae1a205255c9bea5342be59195876aa184d4830aa045bfd60                                                               0.0s
 => => naming to docker.io/library/two-tier-backend                                                                                                        0.0s
root@ip-172-31-91-253:~/Projects/two-tier-flask-app#

>> Run two tier backend Image

root@ip-172-31-91-253:~/Projects/two-tier-flask-app# docker run --name backend-app -d -p 5000:5000 -e MYSQL_HOST=mysqldb -e MYSQL_USER=root -e MYSQL_PASSWORD=root -e MYSQL_DB=devops two-tier-backend

docker network create two-tier-nw -d bridge

root@ip-172-31-91-253:~/Projects/two-tier-flask-app# docker network ls
NETWORK ID     NAME          DRIVER    SCOPE
20caa7cafcee   bridge        bridge    local
79da0acb73fa   host          host      local
f2f9b8c70ed8   mynetwork     bridge    local
f57300e0adb9   none          null      local
d679343d7630   two-tier-nw   bridge    local

root@ip-172-31-91-253:~/Projects/two-tier-flask-app# docker ps
CONTAINER ID   IMAGE              COMMAND                  CREATED         STATUS         PORTS                                       NAMES
053425bbf665   two-tier-backend   "python app.py"          2 minutes ago   Up 2 minutes   0.0.0.0:5000->5000/tcp, :::5000->5000/tcp   flask-backend-app
df047443b4ca   mysql              "docker-entrypoint.s…"   3 minutes ago   Up 3 minutes   3306/tcp, 33060/tcp                         mysqldb
root@ip-172-31-91-253:~/Projects/two-tier-flask-app#

root@ip-172-31-91-253:~/Projects/two-tier-flask-app# docker network inspect two-tier-nw
[
    {
        "Name": "two-tier-nw",
        "Id": "d679343d7630d728855f74a8b04bbb48dce622d807cd5f26aebe9a2c94f1f5f0",
        "Created": "2024-12-01T06:28:02.193120541Z",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.19.0.0/16",
                    "Gateway": "172.19.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "053425bbf665f506446e271a11ad9da80f6536bd8d38d586390015c86a0ca87e": {
                "Name": "flask-backend-app",
                "EndpointID": "2ba67f33c007fd02a33c4c855396aca3a6bc3c06a07080a0a75c97de6e9997af",
                "MacAddress": "02:42:ac:13:00:03",
                "IPv4Address": "172.19.0.3/16",
                "IPv6Address": ""
            },
            "df047443b4ca8b8a93eb22a0e16aedec56a0a64979fc27371a5a99cc7eb0ea86": {
                "Name": "mysqldb",
                "EndpointID": "577e7353debd9a2d19f5db9dc19ce680a3e70e3e9ffbf46e154c8f532b13fcbe",
                "MacAddress": "02:42:ac:13:00:02",
                "IPv4Address": "172.19.0.2/16",
                "IPv6Address": ""
            }
        },
        "Options": {},
        "Labels": {}
    }
]
root@ip-172-31-91-253:~/Projects/two-tier-flask-app#

root@ip-172-31-91-253:~/Projects/two-tier-flask-app# docker ps
CONTAINER ID   IMAGE              COMMAND                  CREATED         STATUS         PORTS                                       NAMES
053425bbf665   two-tier-backend   "python app.py"          6 minutes ago   Up 6 minutes   0.0.0.0:5000->5000/tcp, :::5000->5000/tcp   flask-backend-app
df047443b4ca   mysql              "docker-entrypoint.s…"   7 minutes ago   Up 7 minutes   3306/tcp, 33060/tcp                         mysqldb
root@ip-172-31-91-253:~/Projects/two-tier-flask-app# docker exec -it df047443b4ca bash
bash-5.1# mysql -u root -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 14
Server version: 9.1.0 MySQL Community Server - GPL

Copyright (c) 2000, 2024, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| devops             |
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
5 rows in set (0.18 sec)

mysql> use devops;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql> show tables;
+------------------+
| Tables_in_devops |
+------------------+
| messages         |
+------------------+
1 row in set (0.00 sec)

mysql> select * from messages
    -> ;
+----+---------------------------+
| id | message                   |
+----+---------------------------+
|  1 | Hello Sirji Sanket Here!! |
|  2 | I am good Learning Docker |
+----+---------------------------+
2 rows in set (0.00 sec)

mysql>

##################################################### DOCKER VOLUME ###############################

>> Docker volumes and Storage for data peristence:

>> If we restart docker container data will be there but in terms of remvoal of containers data will be erased

root@ip-172-31-91-253:~/Projects/two-tier-flask-app# docker volume ls
DRIVER    VOLUME NAME
local     024250d4f1d3d2b8152e5394e5f43f287613a5d9270b8c07ea604f19e963fc03
local     25682ed655a83a8964f4b26ba8318460ff44b90155ba3ea753cf8e1f1117f31e
root@ip-172-31-91-253:~/Projects/two-tier-flask-app#


root@ip-172-31-91-253:~/Projects/two-tier-flask-app# docker volume ls
DRIVER    VOLUME NAME
local     024250d4f1d3d2b8152e5394e5f43f287613a5d9270b8c07ea604f19e963fc03
local     25682ed655a83a8964f4b26ba8318460ff44b90155ba3ea753cf8e1f1117f31e
root@ip-172-31-91-253:~/Projects/two-tier-flask-app#
root@ip-172-31-91-253:~/Projects/two-tier-flask-app# docker volume create mysql-data
mysql-data
root@ip-172-31-91-253:~/Projects/two-tier-flask-app# docker volume ls
DRIVER    VOLUME NAME
local     024250d4f1d3d2b8152e5394e5f43f287613a5d9270b8c07ea604f19e963fc03
local     25682ed655a83a8964f4b26ba8318460ff44b90155ba3ea753cf8e1f1117f31e
local     mysql-data
root@ip-172-31-91-253:~/Projects/two-tier-flask-app# docker volume inspect mysql-data
[
    {
        "CreatedAt": "2024-12-01T06:52:31Z",
        "Driver": "local",
        "Labels": null,
        "Mountpoint": "/var/lib/docker/volumes/mysql-data/_data",
        "Name": "mysql-data",
        "Options": null,
        "Scope": "local"
    }
]

>> Volume Binding
root@ip-172-31-91-253:~/Projects/two-tier-flask-app# docker run --name mysqldb -d --network two-tier-nw -v mysql-data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=devops mysql

>> NAMED VOLUMES AND PATH BASED VOLUMES
root@ip-172-31-91-253:~/Projects/two-tier-flask-app# docker run --name mysqldb -d --network two-tier-nw -v /home/ubuntu/mysql-data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=devops mysql


####################################### DOCKER COMPOSE ###############################

Here's a concise Docker Compose cheatsheet to help you quickly refer to common commands and concepts:

## **Docker Compose Commands**

### **Basic Commands**
- **Start services:**
  ```bash
  docker-compose up
  ```
  - Add `-d` to run in detached mode.
  ```bash
  docker-compose up -d
  ```

- **Stop services:**
  ```bash
  docker-compose down
  ```
  - Add `--volumes` to remove volumes:
  ```bash
  docker-compose down --volumes
  ```

- **Rebuild images and restart services:**
  ```bash
  docker-compose up --build
  ```

### **Service Management**
- **List all running services:**
  ```bash
  docker-compose ps
  ```

- **Restart a service:**
  ```bash
  docker-compose restart <service_name>
  ```

- **Stop a service:**
  ```bash
  docker-compose stop <service_name>
  ```

- **Start a stopped service:**
  ```bash
  docker-compose start <service_name>
  ```

- **Remove stopped containers:**
  ```bash
  docker-compose rm
  ```

### **Logs and Debugging**
- **View logs for all services:**
  ```bash
  docker-compose logs
  ```
  - View logs for a specific service:
  ```bash
  docker-compose logs <service_name>
  ```

- **Follow logs (live view):**
  ```bash
  docker-compose logs -f
  ```

### **Execute Commands**
- **Run a command in a service container:**
  ```bash
  docker-compose exec <service_name> <command>
  ```
  Example:
  ```bash
  docker-compose exec web bash
  ```

- **Run a one-off command in a new container:**
  ```bash
  docker-compose run <service_name> <command>
  ```
  Example:
  ```bash
  docker-compose run web python manage.py migrate
  ```

### **Scaling Services**
- **Scale a service:**
  ```bash
  docker-compose up -d --scale <service_name>=<number>
  ```
  Example:
  ```bash
  docker-compose up -d --scale web=3
  ```

---

## **Docker Compose File Syntax**
### **Version Declaration**
```yaml
version: "3.9"  # Specify the Compose file version
```

### **Define Services**
```yaml
services:
  app:
    image: myapp:latest
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./app:/usr/src/app
    environment:
      - NODE_ENV=production
```

### **Networks**
```yaml
networks:
  default:
    driver: bridge
```

### **Volumes**
```yaml
volumes:
  data:
```

---

## **Common Tips**
- **Override the Compose file:**
  ```bash
  docker-compose -f docker-compose.yml -f docker-compose.override.yml up
  ```

- **View configuration:**
  ```bash
  docker-compose config
  ```

- **Validate Compose file:**
  ```bash
  docker-compose config --services
  ```

root@ip-172-31-91-253:~/Projects/two-tier-flask-app# cat docker-compose.yml
version: "3.8"

services:
  mysql:
    image: mysql:5.7
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: devops
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
    volumes:
      - ./mysql-data:/var/lib/mysql
      - ./message.sql:/docker-entrypoint-initdb.d/message.sql
    networks:
      - twotier
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  flask-app:
    build:
      context: .
    container_name: flask-app
    ports:
      - "5000:5000"
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: root
      MYSQL_DB: devops
    depends_on:
      - mysql
    networks:
      - twotier
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

networks:
  twotier:
root@ip-172-31-91-253:~/Projects/two-tier-flask-app#


---

### **Git Commands:**

1. **git init**  
   Initialize a new Git repository.
   
2. **git clone <repo-url>**  
   Clone a remote repository locally.
   
3. **git status**  
   Show the status of changes in the working directory.
   
4. **git add <file>**  
   Stage changes for commit.
   
5. **git commit -m "message"**  
   Commit staged changes with a message.
   
6. **git push**  
   Push local commits to the remote repository.
   
7. **git pull**  
   Fetch and merge changes from the remote repository.
   
8. **git branch**  
   List local branches.
   
9. **git checkout <branch-name>**  
   Switch to another branch.
   
10. **git checkout -b <new-branch>**  
    Create and switch to a new branch.
    
11. **git merge <branch-name>**  
    Merge another branch into the current branch.
    
12. **git fetch**  
    Fetch changes from the remote (without merging).
    
13. **git log --oneline**  
    Show a compact log of commits.
    
14. **git reset --hard <commit-id>**  
    Reset to a specific commit, discarding changes.
    
15. **git rebase <branch-name>**  
    Reapply commits from one branch on top of another.
    
16. **git stash**  
    Temporarily save changes that aren't ready for commit.
    
17. **git stash pop**  
    Reapply stashed changes.
    
18. **git remote -v**  
    Show the remote repository URL(s).
    
19. **git diff**  
    Show changes between commits or the working directory and the last commit.
    
20. **git tag <tag-name>**  
    Create a tag for a specific commit.

---

This gives you a broad overview of essential Docker and Git commands. Let me know if you need more details or examples for any command!
