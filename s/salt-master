############## https://docs.saltproject.io/salt/install-guide/en/latest/topics/install-by-operating-system/linux-deb.html ######################

# Ensure keyrings dir exists
mkdir -p /etc/apt/keyrings
# Download public key
curl -fsSL https://packages.broadcom.com/artifactory/api/security/keypair/SaltProjectKey/public | sudo tee /etc/apt/keyrings/salt-archive-keyring.pgp
# Create apt repo target configuration
curl -fsSL https://github.com/saltstack/salt-install-guide/releases/latest/download/salt.sources | sudo tee /etc/apt/sources.list.d/salt.sources

Run sudo apt update to update metadata.

sudo apt-get install salt-master
sudo apt-get install salt-minion
sudo apt-get install salt-ssh
sudo apt-get install salt-syndic
sudo apt-get install salt-cloud
sudo apt-get install salt-api

sudo systemctl enable salt-master && sudo systemctl start salt-master
sudo systemctl enable salt-minion && sudo systemctl start salt-minion
sudo systemctl enable salt-api && sudo systemctl start salt-api

root@ip-172-31-95-203:~# salt-master --version
salt-master 3007.1 (Chlorine)

root@ip-172-31-92-2:~# salt-minion --version
salt-minion 3007.1 (Chlorine)

Open the Salt Minion configuration file:
sudo nano /etc/salt/minion: Put Salt-master IP
root@ip-172-31-92-2:~# sudo cat /etc/salt/minion
##### Primary configuration settings #####
##########################################
# This configuration file is used to manage the behavior of the Salt Minion.
# With the exception of the location of the Salt Master Server, values that are
# commented out but have an empty line after the comment are defaults that need
# not be set in the config. If there is no blank line after the comment, the
# value is presented as an example and is not the default.

# Per default the minion will automatically include all config files
# from minion.d/*.conf (minion.d is a directory in the same directory
# as the main minion config file).
#default_include: minion.d/*.conf

# Set the location of the salt master server. If the master server cannot be
# resolved, then the minion will fail to start.
master: 172.31.95.203


Inbound Rules:

Type: All ICMP - IPv4 (for ping)
Type: Custom TCP Rule
Port Range: 4505-4506
Source: 172.31.80.0/20 or specific IPs of the Master and Minion.

root@ip-172-31-92-2:~# telnet 172.31.95.203 4506
Trying 172.31.95.203...
Connected to 172.31.95.203.
Escape character is '^]'.
^Z^[[A^CConnection closed by foreign host.
root@ip-172-31-92-2:~# telnet 172.31.95.203 4505
Trying 172.31.95.203...
Connected to 172.31.95.203.
Escape character is '^]'.
^C^ZConnection closed by foreign host.

root@ip-172-31-95-203:~# salt-key -L
Accepted Keys:
Denied Keys:
Unaccepted Keys:
ip-172-31-92-2.ec2.internal
Rejected Keys:

# Accept all Minion keys:
sudo salt-key -A
Or accept a specific key:
sudo salt-key -a <minion-id>

root@ip-172-31-95-203:~# salt-key -A
The following keys are going to be accepted:
Unaccepted Keys:
ip-172-31-92-2.ec2.internal
Proceed? [n/Y] Y
Key for minion ip-172-31-92-2.ec2.internal accepted.
root@ip-172-31-95-203:~# salt-key -L
Accepted Keys:
ip-172-31-92-2.ec2.internal
Denied Keys:
Unaccepted Keys:
Rejected Keys:

root@ip-172-31-95-203:~# salt '*' cmd.run 'uptime'
ip-172-31-92-2.ec2.internal:
     07:06:02 up  1:00,  2 users,  load average: 0.00, 0.00, 0.00
root@ip-172-31-95-203:~#

################################################################################################################################################################################################

If we delete key from salt-master then issue restart salt-minion and then again Accept the salt-key It will work

root@ip-172-31-95-203:~# salt-key -L
Accepted Keys:
ip-172-31-92-2.ec2.internal
Denied Keys:
Unaccepted Keys:
Rejected Keys:
root@ip-172-31-95-203:~# salt-key -D
The following keys are going to be deleted:
Accepted Keys:
ip-172-31-92-2.ec2.internal
Proceed? [N/y] y
Key for minion ip-172-31-92-2.ec2.internal deleted.

root@ip-172-31-95-203:~# salt-key -L
Accepted Keys:
Denied Keys:
Unaccepted Keys:
Rejected Keys:

root@ip-172-31-95-203:~# salt '*' cmd.run 'uptime'
No minions matched the target. No command was sent, no jid was assigned.
ERROR: No return received

root@ip-172-31-95-203:~# salt-key -L
Accepted Keys:
Denied Keys:
Unaccepted Keys:
ip-172-31-92-2.ec2.internal
Rejected Keys:

root@ip-172-31-95-203:~# salt-key -A
The following keys are going to be accepted:
Unaccepted Keys:
ip-172-31-92-2.ec2.internal
Proceed? [n/Y] Y
Key for minion ip-172-31-92-2.ec2.internal accepted.

root@ip-172-31-95-203:~# salt-key -L
Accepted Keys:
ip-172-31-92-2.ec2.internal
Denied Keys:
Unaccepted Keys:
Rejected Keys:

root@ip-172-31-95-203:~# salt '*' cmd.run 'uptime'
ip-172-31-92-2.ec2.internal:
     07:22:49 up  1:17,  2 users,  load average: 0.00, 0.00, 0.00
root@ip-172-31-95-203:~#

################################################################################################################################################################################################

Another case is like if we delete salt-minon keys folder: /etc/salt/pki/minion/ which containers salt-minon pem and pub key if deleted it will not match with salt-master key
So you will need to delete key from salt-master then again regenrate key on salt-minon to accept new key by salt-master

sudo rm -rf /etc/salt/pki/minion/
sudo systemctl restart salt-minion

sudo salt-run manage.status
# Check logs >>
sudo journalctl -u salt-master
sudo journalctl -u salt-minion

###################################################################################################If the Salt Minion key files were deleted from the system, specifically from the `/etc/pki/tls` or `/etc/salt/pki` directory, the Minion will no longer have the necessary key pair to authenticate with the Master. Here’s how to recover from this situation:

### Key File Location for Salt Minion
Salt Minion keys are typically stored in the following location:
```bash
/etc/salt/pki/minion/
```
This directory should contain:
- `minion.pem`: The private key for the Minion.
- `minion.pub`: The public key for the Minion.

### Scenario: Key Files Deleted

If the keys were accidentally deleted and you need to reconfigure them:

1. **Delete the Old Key on the Master**:
   Since you used `salt-key -D`, the Master has already cleared all keys. Make sure this deletion is confirmed by running:
   ```bash
   sudo salt-key -L
   ```
   This should show an empty list of accepted and unaccepted keys.

2. **Recreate the Key on the Minion**:
   On the Minion (e.g., `172.31.92.2`), you need to regenerate the key. You can do this by removing the existing Minion key directory and restarting the Minion service to create new keys:
   ```bash
   sudo rm -rf /etc/salt/pki/minion/
   sudo systemctl restart salt-minion
   ```

   This will cause the Minion to generate a new key pair upon startup.

3. **Accept the New Minion Key on the Master**:
   After restarting, the Minion will request authentication with the Master. On the Master, accept the new Minion key:
   ```bash
   sudo salt-key -L  # Confirm the Minion appears under "Unaccepted Keys"
   sudo salt-key -a <minion-id>  # Accept the key by Minion ID
   ```

   You can also accept all unaccepted keys with:
   ```bash
   sudo salt-key -A
   ```

### Verification
After accepting the new key, verify that the connection is established by running:
```bash
salt '*' test.ping
```
You should see a response like:
```bash
ip-172-31-92-2.ec2.internal:
    True
```

### Best Practices
- **Backup**: Regularly back up important configuration files, including key directories.
- **Permissions**: Ensure the `/etc/salt/pki/minion/` directory has the correct ownership and permissions (`root:root` and `700`).
- **Security**: Be cautious with key deletions; unauthorized deletion or exposure of keys can compromise system security.

### Final Note
If you cannot regain access by re-accepting the key or regenerating it, check if there are any network issues preventing communication between the Master and Minion (e.g., firewalls, security groups, or network ACLs).



############################################################### 


Certainly! Here's an overview of SaltStack, including what it is, its components, how it works, and what is required to set it up:

### 1. **What is SaltStack?**
SaltStack, often called Salt, is an open-source configuration management and remote execution tool. It is used to automate the configuration, management, and orchestration of IT infrastructure, making it easier to manage large-scale systems in a consistent and efficient manner.

### 2. **Key Components of SaltStack**
- **Salt Master**: The central server that manages and controls the communication between the master and the minions. It sends commands and configurations to the minions and receives their results.
- **Salt Minion**: An agent installed on each managed system that communicates with the Salt Master. It listens for commands from the master and executes them.
- **Salt Commands and Modules**: Pre-built functions and scripts in Salt that perform specific tasks. Modules like `cmd`, `file`, and `service` are used for command execution, file management, and service control.
- **Salt Key**: Used for secure communication between the Salt Master and Minions. The master needs to accept a Minion’s key before it can be managed.
- **Pillar**: A method for storing sensitive data or configurations that can be used by the minions. It's typically used for things like passwords and API keys.
- **States**: The configuration definitions that describe how the managed systems should be configured. States are written in YAML and are used for idempotent configurations, meaning they ensure the system is always in the desired state.
- **Grains**: System information automatically gathered about each Minion (e.g., OS type, hostname, IP address).
- **Returns and Event System**: Allows for asynchronous communication and event-driven automation across systems.

### 3. **How SaltStack Works**
- **Master-Minion Architecture**: Salt operates in a master-minion setup. The Salt Master is responsible for sending commands, and the Minions receive and execute these commands.
- **Secure Communication**: The communication between the master and the minions is encrypted using keys (e.g., `salt-key` commands to manage keys).
- **Remote Execution**: Salt can execute commands on Minions remotely through the `salt` command, e.g., `salt <minion_id> cmd.run 'uptime'`.
- **Configuration Management**: Salt states are used to ensure that systems are consistently configured according to pre-defined policies. This can be applied using the `salt-call` command directly on the Minion for local execution.
- **Orchestration**: Salt can be used to coordinate complex multi-step operations involving multiple Minions, often utilizing `state.sls` to manage configurations across systems.
- **Event-Driven Automation**: Salt's event system allows actions to be triggered based on specific conditions, such as system state changes or specific time-based triggers.

### 4. **Key Features and Benefits**
- **Scalability**: Salt can manage thousands of systems efficiently.
- **Flexibility**: It supports both push (master to minion) and pull (minion requesting data from master) models.
- **Speed**: It can handle commands and state executions across a large number of Minions quickly.
- **Extensibility**: Supports custom modules and integrations for specialized tasks.
- **Cross-Platform**: Works on Linux, Windows, macOS, and other systems.
- **Remote Execution and Command Line Tools**: Execute commands in real-time across all connected Minions.

### 5. **What is Required to Set Up SaltStack?**
- **Installation of Salt Master**:
  - Typically installed on a dedicated server or a management node.
  - Run the installation command based on your OS, such as `apt install salt-master` for Debian-based systems or `yum install salt-master` for RHEL/CentOS.

- **Installation of Salt Minion**:
  - Installed on each system that needs to be managed.
  - Use `apt install salt-minion` or `yum install salt-minion` depending on your distribution.
  - Configure the Minion to point to the Salt Master by editing `/etc/salt/minion` and setting `master: <master_ip>`.

- **Configuration**:
  - Ensure that the master and minions can communicate over the network (usually using TCP port 4505/4506).
  - Use `salt-key` to accept or reject Minion keys to establish trust and enable communication.

- **Running Commands**:
  - Basic command to run a remote command: `salt <minion_id> cmd.run 'command'`.
  - Target specific Minions using wildcards or regular expressions: `salt 'ip-172-31-92-2*' cmd.run 'uptime'`.
  - To run a state: `salt <minion_id> state.apply <state_file>`.

### 6. **Common Use Cases**
- **Configuration Management**: Automating the installation and configuration of packages, services, and other settings.
- **Software Deployment**: Installing and managing software across many systems.
- **System Monitoring and Reporting**: Gathering system information and performance data.
- **Security and Compliance**: Enforcing security policies and ensuring compliance.
- **Automation of Repetitive Tasks**: Automating routine administration tasks like backup, updates, and log management.

### 7. **Best Practices**
- **Use State Files**: Define configurations as state files to ensure idempotency and repeatable deployments.
- **Secure Communication**: Regularly rotate keys and use encrypted channels to prevent unauthorized access.
- **Organize Minions**: Group Minions by roles or functions for easier targeting and management.
- **Leverage Grains and Pillars**: Use grains for system information and pillars for securing sensitive data.
- **Test in a Staging Environment**: Always test configuration changes in a non-production environment first.

### 8. **Example Workflow**
1. **Install and Configure the Master**:
   ```bash
   sudo apt install salt-master
   ```
   Edit `/etc/salt/master` if necessary to configure settings.

2. **Install and Configure the Minions**:
   ```bash
   sudo apt install salt-minion
   ```
   Edit `/etc/salt/minion` and set `master: <master_ip>`.

3. **Accept Minion Keys**:
   On the master, run:
   ```bash
   salt-key -A
   ```

4. **Run a Command on a Minion**:
   ```bash
   salt 'minion_id' cmd.run 'uptime'
   ```

5. **Apply State Configuration**:
   ```bash
   salt 'minion_id' state.apply my_state_file
   ```

SaltStack's architecture and flexibility make it an excellent choice for IT automation, configuration management, and orchestration, enabling efficient management of large-scale environments.
